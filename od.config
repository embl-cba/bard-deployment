# od.config
# bard  Configuration File
#
# This file is a cherrypy config file
# Global config is stored in the cherrypy.config dict
# Syntax must be Python builtin ConfigParser
#
# To create your own config file :
# update this file, then
# run the kubectl create configmap command :
#
# to delete previous bard-config configmap
# kubectl delete configmap bard-config -n YOUR_NAMESPACE
#
# to create a bard-config configmap
# kubectl create configmap bard-config --from-file=od.config -n YOUR_NAMESPACE
#
# same commands in one line
# kubectl create -n YOUR_NAMESPACE configmap bard-config --from-file=od.config -o yaml --dry-run=client | kubectl replace -n YOUR_NAMESPACE -f -
#
# to restart pyos
# kubectl delete pods -l run=pyos-od -n abcdesktop
#
# to detect non-ASCII characters in file
# perl -ne 'if (/[^[:ascii:]]/) { print $. . ": " . $_ }' od.config
#######


# data
[global]

namespace: 'YOUR_NAMESPACE'

# DEFAULT HOST URL
# public host url of the service
# change this with your URL or
# set the external URL service if you use a reverse proxy
default_host_url : 'https://bard-external.embl.de'
# END OF DEFAULT HOST URL

kubernetesdefaultsvcclusterlocal: 'svc.ops-k1.embl.de' # replace with your own
# WEBSOCKETROUTING
# describe which url is returned by od.py to reach the WebSocket server
# the more secured value is default_host_url
# websocketrouting: permit value are ['bridge', 'default_host_url', 'host','http_origin']
# websocketrouting describe how the web browser can establish web socket to the user container
#
# the default websocketrouting value is http_origin
# default_host_url :    the default_host_url value is used as the wss or ws connect
# host :                use the hostname in the requested url
# http_origin :         use the hostname set in the recievied http Header request
#                       this is less secure than default_host_url
#                       but it always works
# bridge :              use if the user's container need to bridge the host's ethernet interface
#                       bridge is only used if user container can bind a local network (level 2)
#                       this value is experimental and is not yet avalaible
websocketrouting: 'http_origin'
# END OF WEBSOCKETROUTING


# BIND_SECTION
#
# od.py need an ip address and tcp port to listen
# ip addr to listen is set by default to 0.0.0.0
# this option is only used if you run od.py without a docker container
# this option is only used for developers
# if you run abcdesktop.io in a container,
# the common usage, keep the default value to 0.0.0.0
server.socket_host: '0.0.0.0'
# TCP PORT
# the default tcp port to listen is 8000
# this tcp port is used by nginx to forward HTTP request to od.py
# if you change the default TCP port value, you have to change it to the nginx config file
server.socket_port: 8000
#
# END OF BIND_SECTION

#
# EXTERNAL IP ADDRESS SECTION
# THIS IS NOT THE BINDING IP ADDR
# server.default.ipaddr is only used to locate the external ip of the service
# the server.default.ipaddr is used by geoip and Active Directory site subnet queries
# the default value is a dummy value '127.0.0.1'
# change this value to help geoip to locate your service or for Active Directory site and subnet query
server.default.ipaddr: '127.0.0.1'
# END OF EXTERNAL IP ADDRESS SECTION

# JWT SECTION #
#
# JWT Token for /API URL
# exp : time in seconds, None for unlimited
jwt_token_user : {
  'exp': 360,
  'jwtuserprivatekeyfile': '/config.usersigning/abcdesktop_jwt_user_signing_private_key.pem',
  'jwtuserpublickeyfile' : '/config.usersigning/abcdesktop_jwt_user_signing_public_key.pem' }


#
# JWT RSA SIGNING ANS PAYLOAD KEYS
# od.py use two RSA keys to sign jwt and encrypt payload's jwt
# Use OpenSSL to generate the RSA Keys
#
# command to build rsa kay pairs for jwt payload
# 512 bits is a small value, change here if need
# >openssl genrsa  -out abcdesktop_jwt_desktop_payload_private_key.pem 512
# >openssl rsa     -in  abcdesktop_jwt_desktop_payload_private_key.pem -outform PEM -pubout -out  _abcdesktop_jwt_desktop_payload_public_key.pem
# >openssl rsa -pubin -in _abcdesktop_jwt_desktop_payload_public_key.pem -RSAPublicKey_out -out abcdesktop_jwt_desktop_payload_public_key.pem
#
# command build rsa kay pairs for jwt signing
# >openssl genrsa -out abcdesktop_jwt_desktop_signing_private_key.pem 1024
# >openssl rsa     -in abcdesktop_jwt_desktop_signing_private_key.pem -outform PEM -pubout -out abcdesktop_jwt_desktop_signing_public_key.pem
#
# ! IMPORTANT
# ! the same key files are used by nginx
# ! you have to copy the key file to nginx container image
#
jwt_token_desktop : {
  'exp': 420,
  'jwtdesktopprivatekeyfile':     '/config.signing/abcdesktop_jwt_desktop_signing_private_key.pem',
  'jwtdesktoppublickeyfile' :     '/config.signing/abcdesktop_jwt_desktop_signing_public_key.pem',
  'payloaddesktoppublickeyfile' : '/config.payload/abcdesktop_jwt_desktop_payload_public_key.pem' }

# END OF JWT SECTION #


controllers: { 'ManagerController': { 'permitip':    [ '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fd00::/8', '169.254.0.0/16', '127.0.0.0/8' ] },
               'StoreController':   { 'wrapped_key': {} },
               'ComposerController' : { 'requestsallowed' : { 'getdesktopdescription': False } },
               'DesktopController' :  { 'requestsallowed' : { 'dns': False }, 'permitip': [  '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fd00::/8', '169.254.0.0/16', '127.0.0.0/8' ] } }


### AUTH SECTION ###

# Complete AUTH Sample dictionnary
# The authmanagers is defined as a dictionnary object :


fail2ban: {
  "enable" : False,
  "banexpireafterseconds": 600,
  "failsbeforeban": 5,
  "protectednetworks":  ['192.168.1.0/24']
  }


auth.logmein : {  'enable' : False,
                  'network_list' : ['0.0.0.0/0'],
                  'permit_querystring' : True,
                  'http_attribut' : 'ABCDESKTOPUSERCERT' }

auth.prelogin : { 'enable' : False,
                  'url' : 'https://FQHN/index.session.mustache.html',
                  'network_list' : ['0.0.0.0/0'],
                  'http_attribut ' : 'abcuserid',
                  'http_attribut_to_force_auth_prelogin':  'MUST_USE_PRELOGIN' }

tipsinfo : { 'networkmap': False }

# Below are example configuration for login via EMBL account. 
# EMBL BARD uses openid, keycloak for authentication
# Change accordingly to suit your own environment
# for other auth configurations, refer to abcdesktop docs
authmanagers: {
  'external': {
    'providers': {
     'keycloak':{
        'displayname': 'EMBL Staff Account',
        'enabled': True,
        'basic_auth': True,
        'userinfo_auth': True,
        'scope' : [ 'openid', 'roles','profile' ],
        'client_id': 'YOUR_ID',
        'client_secret': 'YOUR_SECRET',
        'redirect_uri_prefix' : 'https://bard-external.embl.de/API/auth/oauth', #replace with your own instance url
        'redirect_uri_querystring': 'manager=external&provider=keycloak',
        'authorization_base_url': 'https://auth.embl.org/realms/EMBL-HD/protocol/openid-connect/auth', #replace with your own
        'token_url': 'https://auth.embl.org/realms/EMBL-HD/protocol/openid-connect/token', #replace with your own
        'userinfo_url': 'https://auth.embl.org/realms/EMBL-HD/protocol/openid-connect/userinfo', #replace with your own
        'revoke_url': 'https://auth.embl.org/realms/EMBL-HD/protocol/openid-connect/revoke', #replace with your own
        'policies': {
          'acl' : { 'permit': [ 'all' ] },
            # below are used for mounting PV, remove them if you don't have any PV
            'rules'  : {
              'denbi-scratch' : {'conditions' : [ {'boolean':True, 'expected':True } ],'expected' : True,'label':'denbi-scratch'},
              'denbi-alphafold' : {'conditions' : [ {'boolean':True, 'expected':True } ],'expected' : True,'label':'denbi-alphafold'},

	    }
        }
      },
      'denbi':{
        'displayname': 'EMBL Guest Account',
        'enabled': True,
        'basic_auth': True,
        'userinfo_auth': True,
        'scope' : [ 'openid', 'roles','profile' ],
        'client_id': 'YOUR_ID',
        'client_secret': 'YOUR_SECRET',
        #replace the below with your own keycloak url
        'redirect_uri_prefix' : 'https://bard-external.embl.de/API/auth/oauth', # your own instance url
        'redirect_uri_querystring': 'manager=external&provider=denbi', 
        'authorization_base_url': 'https://auth.embl.org/realms/DENBI/protocol/openid-connect/auth',
        'token_url': 'https://auth.embl.org/realms/DENBI/protocol/openid-connect/token',
        'userinfo_url': 'https://auth.embl.org/realms/DENBI/protocol/openid-connect/userinfo',
        'revoke_url': 'https://auth.embl.org/realms/DENBI/protocol/openid-connect/revoke',

        'policies': {
          'acl' : { 'permit': [ 'all' ] },
            'rules'  : {
        'denbi-scratch' : {'conditions' : [ {'boolean':True, 'expected':True } ],'expected' : True,'label':'denbi-scratch'},
        'denbi-alphafold' : {'conditions' : [ {'boolean':True, 'expected':True } ],'expected' : True,'label':'denbi-alphafold'},
	    }
        }
      }
    }
  },
  'metaexplicit': {},
  'implicit': {
    'providers'   : {} } }



# For external provider only
# OAuthLib params
# source https://oauthlib.readthedocs.io/en/latest/oauth2/security.html
#
# OAuthLib will raise an InsecureTransportError if you attempt to use OAuth2 over HTTP, rather than HTTPS.
# Setting this environment variable will prevent this error from being raised.
# This is mostly useful for local testing, or automated tests. Never set this variable in production.
OAUTHLIB_INSECURE_TRANSPORT: True
#
# Prevent "Scope has changed" warning
# requests_oauthlib library this generates a Warning, rather than an Exception
# If a user only approved read only scope but the code is now using different scope.
# when a scope mismatch occurs, user must be prompted to reauthorize via oauth.
OAUTHLIB_RELAX_TOKEN_SCOPE: True
# END OF AUTH SECTION



# MEMCACHE SECTION
# memcache server
# describe how od.py can reach the memcached server
# memcacheserver is the name (FQDN) of the memcached server
# memcacheserver default value is None
# memcacheserver SHOULD BE SET TO None
# od.py build the default :
#       in standalone mode the build value is 'memcached'
#       in kubernetes mode the build value is 'memcached.abcdesktop.svc.cluster.local'
# change it if you need or if you have to run od.py in developer env
# memcacheserver: 'localhost'
# memcacheserver: 'memcached'
#memcacheserver: 'memcached.abcdesktop-ns.svc.ops-k1.embl.de'
#
#
# memcachedport is the tcp port of the memcached server
# the default value is 11211
# memcachedport: 11211
# END OF MEMCACHE SECTION

# MONGO SECTION
# mongodb url
# describe how od.py can reach the mongodb server
# mongodburi is the URI name of the mongodb server
# the same var name mongodbserver support connection string URI format
# read https://docs.mongodb.com/manual/reference/connection-string/#mongodb-uri
# the format is:
# mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]
# mongodburl SHOULD BE SET TO None
# od.py build the default :
#     in standalone mode the build value is 'mongodb://mongodb:27017'
#     in kubernetes mode the build value is 'mongodb://mongodb.abcdesktop.svc.cluster.local:27017'
# change it if you need or if you have to run od.py in developer env
# mongodburl: None
# mongodburl: 'mongodb://localhost:27017'
# mongodburl: 'mongodb://pyos:Az4MeYWUjZDg4Zjhk@mongodb.abcdesktop.svc.cluster.local:32017'
#mongodburl: 'mongodb://mongodb.abcdesktop-ns.svc.ops-k1.embl.de:32017'
# END OF MONGO SECTION


# LANGUAGE SECTION
# list of default supported language
# user container must have the supported language installed
# else the default fallback language is en_US
language : [  'af_ZA', 'am_ET', 'an_ES', 'ar_AE', 'ar_BH', 'ar_DZ', 'ar_EG', 'ar_IN', 'ar_IQ', 'ar_JO', 'ar_KW','ar_LB', 'ar_LY', 'ar_MA', 'ar_OM', 'ar_QA', 'ar_SA', 'ar_SD', 'ar_SY', 'ar_TN', 'ar_YE', 'as_IN', 'ast_ES', 'az_AZ', 'be_BY', 'bg_BG', 'bn_BD', 'bn_IN', 'bo_CN', 'bo_IN', 'br_FR', 'bs_BA', 'ca_AD', 'ca_ES', 'ca_FR', 'ca_IT', 'crh_UA', 'cs_CZ', 'cy_GB', 'da_DK', 'de_AT', 'de_BE', 'de_CH', 'de_DE', 'de_LI', 'de_LU', 'dz_BT', 'el_CY', 'el_GR', 'en_AG', 'en_AU', 'en_BW', 'en_CA', 'en_DK', 'en_GB', 'en_HK', 'en_IE', 'en_IN', 'en_NG', 'en_NZ', 'en_PH', 'en_SG', 'en_US', 'en_ZA', 'en_ZM', 'en_ZW', 'eo', 'eo_US', 'es_AR', 'es_BO', 'es_CL', 'es_CO', 'es_CR', 'es_CU', 'es_DO', 'es_EC', 'es_ES', 'es_GT', 'es_HN', 'es_MX', 'es_NI', 'es_PA', 'es_PE', 'es_PR', 'es_PY', 'es_SV', 'es_US', 'es_UY', 'es_VE', 'et_EE', 'eu_ES', 'eu_FR', 'fa_IR', 'fi_FI', 'fr_BE', 'fr_CA', 'fr_CH', 'fr_FR', 'fr_LU', 'ga_IE', 'gd_GB', 'gl_ES', 'gu_IN', 'he_IL', 'hi_IN', 'hr_HR', 'hu_HU', 'id_ID', 'is_IS', 'it_CH', 'it_IT', 'ja_JP', 'ka_GE', 'kk_KZ', 'km_KH', 'kn_IN', 'ko_KR', 'ku_TR', 'lt_LT', 'lv_LV', 'mai_IN', 'mk_MK', 'ml_IN', 'mn_MN', 'mr_IN', 'ms_MY', 'my_MM', 'nb_NO', 'nds_DE', 'nds_NL', 'ne_NP', 'nl_AW', 'nl_BE', 'nl_NL', 'nn_NO', 'oc_FR', 'or_IN', 'pa_IN', 'pa_PK', 'pl_PL', 'pt_BR', 'pt_PT', 'ro_RO', 'ru_RU', 'ru_UA', 'si_LK', 'sk_SK', 'sl_SI', 'sq_AL', 'sq_MK', 'sr_ME', 'sr_RS', 'sv_FI', 'sv_SE', 'ta_IN', 'ta_LK', 'te_IN', 'tg_TJ', 'th_TH', 'tr_CY', 'tr_TR', 'ug_CN', 'uk_UA', 'uz_UZ', 'vi_VN', 'xh_ZA', 'zh_CN', 'zh_HK', 'zh_SG', 'zh_TW' ]
# END OF LANGUAGE SECTION


# WebRTC Janus config
#
webrtc.enable : False

#
# install a coturn server first with TLS support
# /etc/turnserver.conf
# # minimal configurtion file for /etc/turnserver.conf
# # use TLS/SSL
# lt-cred-mech
# use-auth-secret
# static-auth-secret=SUPERSECRETFORABCDESKTOPUSERS
# # Certificate file.
# # Use an absolute path or path relative to the
# # configuration file.
# # Use PEM file format.
# cert=/etc/certs/fullchain.pem
# # Private key file.
# # Use an absolute path or path relative to the
# # configuration file.
# # Use PEM file format.
# pkey=/etc/certs/privkey.pem
#
# in most cases, you need a stun and turn servers
#
# webrtc.rtc_configuration:{ 'iceServers':[ {'urls':'stun:stun.l.google.com:19302'} ] }
# webrtc.coturn: {
#  'coturn_static_auth_secret': 'SUPERSECRETFORABCDESKTOPUSERS',
#  'ttl':3600,
#  'protocol': 'turns',
#  'url': 'turnserver.domain.local:3478' }
#
#  'coturn_static_auth_secret' is the sahred secret with coturn server
#  'ttl' : ttl for auth
#  'protocol': can be 'turn' or 'turns'
#  'url': turn server or turns server for the web browser
#
# pyos will build the rtc_configuration json conf
#
# webrtc.rtc_configuration becomes
# # {
# #   "iceServers": [
# #       {
# #           "urls": "stun:stun.l.google.com:19302"
# #      },
# #       {
# #           "urls": "turns:nturns.domain.local:3478",
# #           "username": "1703086872",
# #           "credential": "+BuFkb0hFf8pAoFwpp0A0UbO+1k="
# #       }
# #   ]
# # }


#
# webrtc.rtc_constraints
# webrtc.rtc_constraints: { 'video': False, 'audio': True }
# For both video and audio, its value is either a boolean or an object.
# define if 'audio' should be send using the user's microphone, the default value is True
# keep in mind that a user can refuse local microphone access
# define if 'video' should be send using the user's webcam, the default value is False
# keep in mind that a user can refuse local camera access
#
# This value is used by navigator.mediaDevices.getUserMedia(rtc_constraints)
# https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
#
webrtc.rtc_constraints: { 'video': False, 'audio': True }

# END OF WebRTC SECTION

# Kubernetes timeout
# default timeout to bound a persistentVolumeClaim
K8S_BOUND_PVC_TIMEOUT_SECONDS: 60
# default timeout to create a pod
K8S_CREATE_POD_TIMEOUT_SECONDS: 360


# Application execute class defined
executeclasses : {
  'default':{
    'nodeSelector':{},
    'resources':{
      'requests':{'memory':"16Gi",'cpu':"8000m","nvidia.com/gpu":"1"},
      'limits':  {'memory':"64Gi",'cpu':"16000m","nvidia.com/gpu":"1"}
    }
  },
  'bronze':{
    'nodeSelector':{},
    'resources':{
      'requests':{'memory':"16Gi",'cpu':"8000m","nvidia.com/gpu":"1"},
      'limits':  {'memory':"64Gi",'cpu':"16000m","nvidia.com/gpu":"1"}
    }
  },
  'imaging':{
    'nodeSelector':{},
    'resources':{
      'requests':{'memory':"16Gi",'cpu':"8000m","nvidia.com/gpu":"1"},
      'limits':  {'memory':"64Gi",'cpu':"16000m","nvidia.com/gpu":"1"}
    }
  },
  'programming':{
    'nodeSelector':{},
    'resources':{
      'requests':{'memory':"16Gi",'cpu':"8000m","nvidia.com/gpu":"1"},
      'limits':  {'memory':"64Gi",'cpu':"16000m","nvidia.com/gpu":"1"}
       } } }


# DESKTOP OPTIONS
# describe how the user container is created
# desktop options

desktop.release : '3.2'

desktop.secretslocalaccount: '/etc/localaccount'
desktop.overwrite_environment_variable_for_application : "/composer/overwrite_environment_variable_for_application.sh"
desktop.pod : {
  'spec' : {
    'privileged': False,
    'shareProcessNamespace': True,
    'shareProcessMemory': True,
    'shareProcessMemorySize': '256Mi',
    'securityContext': {
      'supplementalGroups': [ '{{ supplementalGroups }}' ],
      'runAsUser': '{{ uidNumber }}',
      'runAsGroup': '{{ gidNumber }}'
    },
   'affinity': {
      'nodeAffinity': {
         'requiredDuringSchedulingIgnoredDuringExecution': {
           'nodeSelectorTerms': [{
              'matchExpressions': [{'key': 'hub.jupyter.org/node-purpose', 'operator': 'In', 'values': ['user']}]
           }]
         }
      }

    },
    'tolerations':[
    {
        'effect': "NoSchedule",
        'key': 'training',
        'operator': 'Equal',
        'value': 'true'
    }    ]



  },
  #main desktop container
  'graphical' : {
    'image': {'default': 'registry.git.embl.de/grp-cbbcs/abcdesktop-apps/oc.user.external:latest'},
    'imagePullPolicy':  'Always',
    'enable': True,
    'acl':  { 'permit': [ 'all' ] },
    'waitportbin' : '/composer/node/wait-port/node_modules/.bin/wait-port',
    'resources': {
      'requests':{'memory':"16Gi",'cpu':"8000m","nvidia.com/gpu":"1"},
      'limits':  {'memory':"64Gi",'cpu':"16000m","nvidia.com/gpu":"1"}
    },
    'securityContext': {
      'readOnlyRootFilesystem': False,
      'allowPrivilegeEscalation': False
     },
    'tcpport': 6081,
    'secrets_requirement' : [ 'abcdesktop/vnc', 'abcdesktop/kerberos']
  },
  'spawner' : {
    'enable': True,
    'tcpport': 29786,
    'waitportbin' : '/composer/node/wait-port/node_modules/.bin/wait-port',
    'acl':  { 'permit': [ 'all' ] }
  },
  'broadcast' : {
    'enable': True,
    'tcpport': 29784,
    'acl':  { 'permit': [ 'all' ] }
  },
  'webshell' : {
    'enable': True,
    'tcpport': 29781,
    'acl':  { 'permit': [ 'all' ] }
  },
  'printer' : {
    'image': 'abcdesktopio/oc.cupsd:3.0',
    'imagePullPolicy': 'Always',
    'enable': True,
    'tcpport': 681,
    'securityContext': { 'runAsUser': 0 },
    'resources': {
      'requests': { 'memory': "64Mi", 'cpu': "125m" },
      'limits'  : { 'memory': "512Mi",  'cpu': "500m" }
    },
    'acl':  { 'permit': [ 'all' ] }
  },
  'printerfile' : {
    'enable': True,
    'tcpport': 29782,
    'acl':  { 'permit': [ 'all' ] }
  },
  'filer' : {
    'image': 'abcdesktopio/oc.filer:3.1',
    'imagePullPolicy':  'Always',
    'enable': True,
    'tcpport': 29783,
    'acl':  { 'permit': [ 'all' ] },
    'resources': {
      'requests': { 'memory': "32Mi",  'cpu': "100m" },
      'limits'  : { 'memory': "128Mi", 'cpu': "250m" }
    }
   },
  'storage' : {
    'image': 'k8s.gcr.io/pause:3.8',
    'imagePullPolicy':  'Always',
    'enable': True,
    'acl': { 'permit': [ 'all' ] },
    'resources': {
      'requests': { 'memory': "32Mi",  'cpu': "100m" },
      'limits'  : { 'memory': "128Mi", 'cpu': "250m" }
    }
  },
  'sound': {
    'image': 'abcdesktopio/oc.pulseaudio:3.2',
    'imagePullPolicy': 'Always',
    'enable': False,
    'tcpport': 4714,
    'acl':  { 'permit': [ 'all' ] },
    'resources': {
      'requests': { 'memory': "8Mi",  'cpu': "50m"  },
      'limits'  : { 'memory': "64Mi", 'cpu': "250m" }
    }
  },
  'init': {
    'image': 'busybox',
    'imagePullPolicy': 'Always',
    'securityContext': { 'runAsUser': 0 },
    'acl':  { 'permit': [ 'all' ] },
    'resources': {
      'requests': { 'memory': "32Mi",  'cpu': "100m" },
      'limits'  : { 'memory': "128Mi", 'cpu': "250m" }
    },
    'command':  [ 'sh', '-c',  'chown {{ uidNumber }}:{{ gidNumber }} ~|| true && chmod 750 ~||true' ]

  },
  'ephemeral_container': {
    'enable': True,
    'acl':  { 'permit': [ 'all' ] },
    'imagePullPolicy': 'Always',
    'securityContext': {
        'supplementalGroups': [ '{{ supplementalGroups }}' ] ,
        'readOnlyRootFilesystem': False,
        'allowPrivilegeEscalation': False,
        'runAsUser':                '{{ uidNumber }}',
        'runAsGroup':               '{{ gidNumber }}'
    }
  },
  'pod_application' : {
    'enable': True,
    'imagePullPolicy': 'Always',
    'tolerations':[
    {
        'effect': "NoSchedule",
        'key': 'denbi',
        'operator': 'Equal',
        'value': 'true'
    }
    ],
    'securityContext': {
        'supplementalGroups': [ '{{ supplementalGroups }}' ] ,
        'readOnlyRootFilesystem': False,
        'allowPrivilegeEscalation': False,
        'runAsUser':                '{{ uidNumber }}',
        'runAsGroup':               '{{ gidNumber }}'
    },
    'acl':  { 'permit': [ 'all' ] } } }

# volumes to mount, key are labels defined in previous section
desktop.policies: {
   'rules': {
  'volumes' : {
    'denbi-scratch': {'type'  : 'pvc','name'  : 'beegfs-scratch-denbi-pvc','claimName': 'beegfs-scratch-denbi-pvc','mountPath': '/scratch/denbi/k8s'},
    'denbi-alphafold': {'type'  : 'pvc','name'  : 'beegfs-scratch-alphafold-pvc','claimName': 'beegfs-scratch-alphafold-pvc','mountPath': '/scratch/AlphaFold_DBs'},
      }
      },
      'acls' : {},
        'max_app_counter' : 10
      }

desktop.homedirectorytype: 'persistentVolumeClaim'
desktop.homedirdotcachetoemptydir: False
# read https://www.abcdesktop.io/3.0/config/volumes
#
# where user home dir are located if desktop.homedirectorytype is 'hostPath'
# this can be /tmp for example
# in production the recommanded value is a mount point (like nfs)
# set :
#desktop.hostPathRoot: '/mnt/embl_home/{{uid}}'
#desktop.hostPathRoot: '/tmp'
#desktop.hostPathRoot: '/tmp'
# if desktop.homedirectorytype is set to persistentVolumeClaim
# replace mystorageclass by your own storageClassName
#
#desktop.homedirectorytype: 'persistentVolumeClaim'
#desktop.persistentvolumespec: {
#	'storageClassName': 'basic-csi',
#        'mountOptions': [
#	    'nfsvers=3'
#	],
#        'capacity': {
#	    'storage': '50Gi'
#	},
#        'accessModes': ['ReadWriteOnce'],
#        'csi':{
#          'driver':'nfs.csi.k8s.io',
#          'readOnly': False,
#          'volumeHandle':'10.11.4.181#home#{{ userid }}',
#          'volumeAttributes':{
#		'server': '10.11.4.181',
#                'share':'/home/{{ userid }}'
#          }}}


#desktop.persistentvolume: {
#            'metadata': { 'name': '{{ provider }}-{{ userid }}-{{ uuid }}' },
#            'spec': {
#            'storageClassName': 'basic-csi',
#            'mountOptions': [
#              'nfsvers=3'
#            ],
#            'capacity': {
#              'storage': '10Gi'
#            },
#            'accessModes': [ 'ReadWriteOnce' ],
#            'csi': {
#              'driver': 'nfs.csi.k8s.io',
#              'readOnly': False,
#              'volumeHandle': '10.11.4.181#volume1#homedir#{{ userid }}',
#              'volumeAttributes': {
#                  'server': '10.11.4.181',
#                  'share': '/volume1/homedir/{{ userid }}'
#              } } } }


desktop.persistentvolume: None
desktop.persistentvolumeclaim: 'pvc-bard-external-home-september-2024' #replace with your own
#desktop.persistentvolumeclaimforcesubpath: True
desktop.persistentvolumeclaimforcesubpath: False
desktop.appendpathtomounthomevolume: '..'
desktop.removepersistentvolumeclaim: False
desktop.removepersistentvolume: False



#
# desktop.defaultbackgroundcolors
# list of string color
# example [ '#6EC6F0', '#333333' ]
# The desktop.defaultbackgroundcolors allow you to change the desktop default background color.
# The default value is a list of string
# [ '#6EC6F0', '#333333', '#666666', '#CD3C14', '#4BB4E6', '#50BE87', '#A885D8', '#FFB4E6' ]
# The desktop.defaultbackgroundcolors length can contain up to 8 entries.
desktop.defaultbackgroundcolors : [ '#6EC6F0', '#333333', '#666666', '#CD3C14', '#4BB4E6', '#50BE87', '#A885D8', '#FFB4E6' ]

#
# desktop.nodeselector
# Value None or dict
# This option permits to assign user pods to nodes
# It specifies a map of key-value pairs.
# For the pod to be eligible to run on a node,
# the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).
# The most common usage is one key-value pair.
# in cluster set label to node
# kubectl label node YOURNODE abcdesktoprole=worker
# desktop.nodeselector : { 'abcdesktoprole': 'worker' }
desktop.nodeselector: {'network' : 'dmz'}

# Add default environment vars
# desktop.envlocal is a dictionary.
# desktop.envlocal contains a (key,value) added by default as environment variables to oc.user.
# Only static variables are defined here.
# Dynamics values are set by python code
desktop.envlocal: {
   'LIBOVERLAY_SCROLLBAR':'0',
   'UBUNTU_MENUPROXY':'0',
   'X11LISTEN':'tcp',
   'WEBSOCKIFY_HEARTBEAT':'30',
   'TURN_PROTOCOL':'tcp',
   'ABCDESKTOP_BG_COLOR': '#18974c' }

#
# for demo or kiosk mode
# remove all files in user's home directory
# add ['lifecycle'] = {   'preStop': { 'exec': { 'command': [ "/bin/bash", "-c", "rm -rf ~/{*,.*}" ] } }}
# to the graphical container
desktop.removehomedirectory : False

#
# desktop default generic user
# balloon is the default generic user name.
# The user is created inside the oc.user container
# this user MUST exist in the oc.user image
# If you change this value, you have to rebuild your own oc.user file
# The script oc.user in Dockerfile oc.user :
# oc.user Dockerfile commands extract
#   ENV BUSER balloon
#   RUN groupadd --gid 4096 $BUSER
#   RUN useradd --create-home --shell /bin/bash --uid 4096 -g $BUSER --groups lpadmin,sudo $BUSER
#
desktop.username : 'balloon'
# default user id of desktop.username
desktop.userid : 4096
# default group id of desktop.username
desktop.groupid : 4096
# default home directory of desktop.username
desktop.userhomedirectory : '/home/balloon'
# END OF DESKTOP OPTIONS


#
# default dock config
# dock option describes which default application are show by default
# dock option is a dictionary
# 'terminal'    :  Terminal application
# 'webshell'    :  HTML 5, terminal application based on xterm.js
# The values are parsed by javascript front
#
dock : {
  'terminal': {
    'args': '',
    'acl': { 'permit': [ 'all' ] },
    'name': u'TerminalBuiltin',
    'keyword': u'terminal,shell,bash,builtin,pantheon',
    'launch': u'qterminal.qterminal',
    'displayname': u'Terminal Builtin',
    'execmode': u'builtin',
    'cat': u'utilities,development',
    'id': u'terminalbuiltin.d',
    'hideindock': True,
    'icon': u'pantheon-terminal-builtin-icons.svg'
  },
  'webshell': {
    'name': u'WebShell',
    'acl': { 'permit': [ 'all' ] },
    'keyword': u'terminal,shell,webshell,bash,cmd',
    'launch': u'frontendjs.webshell',
    'displayname': u'Web Shell',
    'execmode': u'frontendjs',
    'cat': u'utilities,development',
    'id': u'webshell.d',
    'icon': u'webshell.svg' } }



# FRONT END OPTIONS
# front.menuconfig is a dictionary to show or hide menu entries
# at the to rignt corner
# in front js
# 'grabmouse': False,
front.menuconfig  : { 'settings': True, 'appstore': True, 'screenshot':True, 'download': True, 'logout': True, 'disconnect': True }


#
# GEOLOCATION Geolocation
# params used for https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition
# An optional object including the following parameters:
#
# maximumAge A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to Infinity the device must return a cached position regardless of its age. Default: 0.
# timeout A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is Infinity, meaning that getCurrentPosition() won't return until the position is available.
# enableHighAccuracy A boolean value that indicates the application would like to receive the best possible results. If true and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power. Default: false.
# geolocation : { 'enableHighAccuracy': True, 'timeout': 5000, 'maximumAge': 0 }

#
# LOGGING SECTION
# The logging configuration is a dictionnary object.
# The logging configuration describes where and how log message information have to been send.
# The syslog and graylog protocol messaging are supported too.
# The default features for each handlers are :
# handler Features
# console log message using a logging.StreamHandler to the stream: ext://sys.stdout formated as standard
# cherrypy_console log message using a logging.StreamHandler to the stream: ext://sys.stdout formatted as access
# cherrypy_access  log message using a logging.StreamHandler to the file stream logs/access.log formatted as access
# cherrypy_trace   log message using a logging.StreamHandler to the stream: logs/trace.log formatted as standard
#
# Sub modules used by od.py can log information too.
#
# Sub module Default Values
# docker.utils.config    { 'level': 'INFO' },
# urllib3.connectionpool { 'level': 'ERROR'},
#
#
# logging configuration
# come from https://docs.python.org/3.8/library/logging.config.html
# need double %% to escape %
#
# graylog https://github.com/severb/graypy
# use handler class name as
# graypy.GELFUDPHandler - UDP log forwarding
# graypy.GELFTCPHandler - TCP log forwarding
# graypy.GELFTLSHandler - TCP log forwarding with TLS support
# graypy.GELFHTTPHandler - HTTP log forwarding
# graypy.GELFRabbitHandler - RabbitMQ log forwarding

logging: {
  'version': 1,
  'disable_existing_loggers': False,
  'formatters': {
    'access': {
      'format': '%%(message)s - user: %%(userid)s',
      'datefmt': '%%Y-%%m-%%d %%H:%%M:%%S'
    },
    'standard': {
      'format': '%%(asctime)s %%(module)s [%%(levelname)-7s] %%(name)s.%%(funcName)s:%%(userid)s %%(message)s',
      'datefmt': '%%Y-%%m-%%d %%H:%%M:%%S'
    },
    'syslog': {
      'format': '%%(asctime)s %%(levelname)s %%(module)s %%(process)d %%(name)s.%%(funcName)s:%%(userid)s %%(message)s',
      'datefmt': '%%Y-%%m-%%d %%H:%%M:%%S'
    },
    'graylog': {
      'format': '%%(levelname)s %%(module)s %%(process)d %%(name)s.%%(funcName)s:%%(userid)s %%(message)s'
    }
  },
  'filters': {
    'odcontext': {
      '()': 'oc.logging.OdContextFilter'
    }
  },
  'handlers': {
    'console': {
      'class': 'logging.StreamHandler',
      'filters': [ 'odcontext' ],
      'formatter': 'standard',
      'stream': 'ext://sys.stdout'
    },
    'cherrypy_console': {
      'class': 'logging.StreamHandler',
      'filters': [ 'odcontext' ],
      'formatter': 'access',
      'stream': 'ext://sys.stdout'
    },
    'cherrypy_access': {
      'class': 'logging.handlers.RotatingFileHandler',
      'filters': [ 'odcontext' ],
      'formatter': 'access',
      'filename': 'logs/access.log',
      'maxBytes': 10485760,
      'backupCount': 20,
      'encoding': 'utf8'
    },
    'cherrypy_trace': {
      'class': 'logging.handlers.RotatingFileHandler',
      'filters': [ 'odcontext' ],
      'formatter': 'standard',
      'filename': 'logs/trace.log',
      'maxBytes': 10485760,
      'backupCount': 20,
      'encoding': 'utf8',
      'mode': 'w'
    }
  },
  'loggers': {
    '': {
      'handlers': [ 'console', 'cherrypy_trace'  ],
      'level': 'DEBUG'
    },
    'docker.utils.config': {
      'level': 'INFO'
    },
    'urllib3.connectionpool': {
      'level': 'ERROR'
    },
    'cherrypy.access': {
      'handlers': [ 'cherrypy_access' ],
      'level': 'INFO',
      'propagate': False
    },
    'cherrypy.error': {
      'handlers': [ 'console', 'cherrypy_trace' ],
      'level': 'DEBUG',
      'propagate': False
    }
  } }
# END OF LOGGING SECTION

[/]
[/img]

